package view;

import control.Compromisso;
import control.ConnectionFactory;
import control.INI;
import control.NivelAcesso;
import control.Usuario;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.TableRowSorter;
import model.ColorirTabela;
import model.CompromissosTableModel;

/**
 * Classe para criação do view do objeto Agenda
 *
 * @author Wesley Ozebe
 * @version 1.02
 */
public class AgendaView extends javax.swing.JFrame {

    private final Usuario userLogado;
    private static ArrayList<NivelAcesso> niveis = new ArrayList<>();
    public static ArrayList<Compromisso> compromissos = new ArrayList<>();
    private static Connection connection;
    private static ConnectionFactory fabrica = new ConnectionFactory();

    private static CompromissosTableModel modelo = new CompromissosTableModel();
    TableRowSorter<CompromissosTableModel> sorter = new TableRowSorter<CompromissosTableModel>(modelo);

    public static INI db;
    public static INI user;
    public static INI password;

    /**
     * Cria um novo form AgendaView
     *
     * @param chave chave principal do arquivo .ini
     * @param valor valor da chave principal que invoca o nome do banco do
     * arquivo .ini
     * @param usuario valor da chave usuario do arquivo .ini
     * @param senha valor da chave senha do arquivo .ini
     * @param userLogado usuarioLogado no sistema
     */
    public AgendaView(String chave, String valor, String usuario, String senha, Usuario userLogado) throws ClassNotFoundException, SQLException, IOException {
        this.userLogado = userLogado;
        db = new INI(chave, valor);
        user = new INI(chave, usuario);
        password = new INI(chave, senha);
        initComponents();
        userLabel.setText(this.userLogado.getUsuario());
        //criaTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calendario = new com.toedter.calendar.JCalendar();
        jLabel1 = new javax.swing.JLabel();
        userLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCompromissos = new javax.swing.JTable();
        novoBtn = new javax.swing.JButton();
        editarBtn = new javax.swing.JButton();
        excluirBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Agenda de Compromissos");
        setResizable(false);

        calendario.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calendarioPropertyChange(evt);
            }
        });

        jLabel1.setText("Usuário:");

        userLabel.setText("jLabel2");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Compromissos do dia");

        tableCompromissos.setModel(modelo);
        tableCompromissos.setRowSorter(sorter);
        tableCompromissos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tableCompromissos);
        tableCompromissos.setDefaultRenderer(Object.class, new ColorirTabela());

        novoBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        novoBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/images/add.png"))); // NOI18N
        novoBtn.setText("Novo");
        novoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novoBtnActionPerformed(evt);
            }
        });
        novoBtn.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                novoBtnPropertyChange(evt);
            }
        });

        editarBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        editarBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/images/edit.png"))); // NOI18N
        editarBtn.setText("Editar");
        editarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarBtnActionPerformed(evt);
            }
        });

        excluirBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        excluirBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/images/remove.png"))); // NOI18N
        excluirBtn.setText("Excluir");
        excluirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirBtnActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(121, 210, 121));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Á acontecer");
        jLabel3.setToolTipText("");
        jLabel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jLabel3.setOpaque(true);

        jLabel4.setBackground(new java.awt.Color(255, 210, 77));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Acontecendo");
        jLabel4.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jLabel4.setOpaque(true);

        jLabel5.setBackground(new java.awt.Color(255, 77, 77));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Aconteceu");
        jLabel5.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jLabel5.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(userLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(calendario, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(182, 182, 182)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(novoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(editarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(excluirBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(110, 110, 110))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(calendario, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(novoBtn)
                    .addComponent(editarBtn)
                    .addComponent(excluirBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(userLabel))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void calendarioPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calendarioPropertyChange
        try {
            criaTable();
            atualizaDadosTable();
        } catch (ClassNotFoundException | SQLException | IOException ex) {
            Logger.getLogger(AgendaView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_calendarioPropertyChange

    private void novoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novoBtnActionPerformed

        final NovoCompromissoView novoCompromisso = new NovoCompromissoView(calendario.getDate(), userLogado);
        novoCompromisso.setVisible(rootPaneCheckingEnabled);
        this.novoBtn.setEnabled(false);
    }//GEN-LAST:event_novoBtnActionPerformed

    private void editarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarBtnActionPerformed
        int linha = -1;
        linha = tableCompromissos.getSelectedRow();
        if (linha == -1) {
            JOptionPane.showMessageDialog(null, "Favor selecionar um compromisso", "Erro", JOptionPane.ERROR_MESSAGE);
        } else {
            linha = tableCompromissos.getRowSorter().convertRowIndexToModel(linha);
            System.out.println("h -> " + compromissos.get(linha).getHora_inicio() + " id -> " + compromissos.get(linha).getId());
        }
//        try {
//            carregaNiveisAcesso();
//            int linha = -1;
//            linha = tableCompromissos.getSelectedRow();
//            if (linha == -1) {
//                JOptionPane.showMessageDialog(null, "Favor selecionar um compromisso", "Erro", JOptionPane.ERROR_MESSAGE);
//            } else {
//                linha = tableCompromissos.getRowSorter().convertRowIndexToModel(linha);
//                editarBtn.setEnabled(false);
//                final UsuariosEditaView editaUsuario = new UsuariosEditaView(usuarios.get(linha), niveis);
//                editaUsuario.setVisible(true);
//            }
//        } catch (ClassNotFoundException | SQLException | IOException ex) {
//            JOptionPane.showMessageDialog(null, "Não foi possível carregar!\n" + ex, "Erro", JOptionPane.ERROR_MESSAGE);
//        } catch (IllegalArgumentException ex) {
//            JOptionPane.showMessageDialog(null, "Não foi possível carregar o compromisso do usuário!\n" + ex, "Erro", JOptionPane.ERROR_MESSAGE);
//            editarBtn.setEnabled(true);
//        }

    }//GEN-LAST:event_editarBtnActionPerformed

    private void excluirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirBtnActionPerformed
        int linha = -1;
        linha = tableCompromissos.getSelectedRow();
        if (linha == -1) {
            JOptionPane.showMessageDialog(null, "Favor selecionar um compromisso", "Erro", JOptionPane.ERROR_MESSAGE);
        } else {
            linha = tableCompromissos.getRowSorter().convertRowIndexToModel(linha);
            excluirCompromisso(compromissos.get(linha).getId());
        }
    }//GEN-LAST:event_excluirBtnActionPerformed

    private void novoBtnPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_novoBtnPropertyChange
        try {
            criaTable();
            atualizaDadosTable();
        } catch (ClassNotFoundException | SQLException | IOException ex) {
            JOptionPane.showMessageDialog(null, "Não foi possível carregar!\n" + ex, "Erro", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(AgendaView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_novoBtnPropertyChange

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(AgendaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(AgendaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(AgendaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(AgendaView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                try {
//                    new AgendaView().setVisible(true);
//
//                } catch (ClassNotFoundException | SQLException | IOException ex) {
//                    JOptionPane.showMessageDialog(null, "Não foi possível carregar!\n" + ex, "Erro", JOptionPane.ERROR_MESSAGE);
//                    Logger.getLogger(AgendaView.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static com.toedter.calendar.JCalendar calendario;
    public static javax.swing.JButton editarBtn;
    public static javax.swing.JButton excluirBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JButton novoBtn;
    public static javax.swing.JTable tableCompromissos;
    private javax.swing.JLabel userLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Método para criação da tabela, onde todos os dados da tabela sao
     * excluidos e requisitados ao banco novamente, preenchendo o model
     *
     * @author Wesley Ozebe
     */
    public void criaTable() throws ClassNotFoundException, SQLException, IOException {
        connection = fabrica.getConnection(db.getDir(), user.getDir(), password.getDir());

        PreparedStatement stmt = connection.prepareStatement("select * from compromisso as c where c.data_comp = ? and c.idusuario = ? order by c.hora_inicio ");

        java.sql.Date sDate = convertUtilToSql(calendario.getDate());
        stmt.setDate(1, sDate);
        stmt.setInt(2, this.userLogado.getId());
        ResultSet resultSet = stmt.executeQuery();

//        while (modelo.getRowCount() > 0) {
//            for (int i = 0; i < modelo.getRowCount(); i++) {
//                modelo.removeUsuario(i);
//            }
//        }
        compromissos.removeAll(compromissos);

        while (resultSet.next()) {
            Compromisso c = new Compromisso();

            c.setCriado(formataTimestamp(resultSet.getTimestamp("criado")));
            c.setData(resultSet.getString("data_comp"));
            c.setDescricao(resultSet.getString("descricao"));
            c.setEditado(formataTimestamp(resultSet.getTimestamp("editado")));
            c.setHora_inicio(resultSet.getString("hora_inicio"));
            c.setHora_final(resultSet.getString("hora_final"));
            c.setId(resultSet.getInt("id"));
            c.setIdUsuario(resultSet.getInt("idUsuario"));

            modelo.addCompromisso(c);
            compromissos.add(c);
        }
        resultSet.close();
        stmt.close();
        connection.close();
    }

    /**
     * Método para atualizacao dos dados da tabela, onde os dados no modelo sao
     * removidos e inseridos novamente utilizando como base os objetos no
     * arrayList de compromissos
     *
     * @author Wesley Ozebe
     */
    public static void atualizaDadosTable() {
        while (modelo.getRowCount() > 0) {
            for (int i = 0; i < modelo.getRowCount(); i++) {
                modelo.removeCompromisso(i);
            }
        }
        java.sql.Date sDate = convertUtilToSql(calendario.getDate());

        for (Compromisso c : compromissos) {
            if (c.getData().equals(sDate.toString())) {
                modelo.addCompromisso(c);
            }
        }
    }

    /**
     * Método para conversão de um objeto do tipo Date para um do tipo
     * java.sql.Date para persistir no banco de dados
     *
     * @author Wesley Ozebe
     * @param uDate java.util.Date - objeto do tipo Date a ser convertido
     * @return java.sql.Date - valor convertido
     */
    private static java.sql.Date convertUtilToSql(java.util.Date uDate) {
        java.sql.Date sDate = new java.sql.Date(uDate.getTime());
        return sDate;
    }

    /**
     * Método para conversão de um Timestamp para uma string
     *
     * @author Wesley Ozebe
     * @param t Timestamp - timestamp a ser convertido
     * @return String - timeStamp converido para o formato dd-MM-yyyy HH:mm:ss
     */
    private static String formataTimestamp(Timestamp t) {
        if (t != null) {
            SimpleDateFormat formatador = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
            return formatador.format(t);
        } else {
            return "";
        }

    }

    /**
     * Método para exclusão de um compromisso utilizando-se o id passado
     *
     * @author Wesley Ozebe
     * @param id int - id do compromisso
     */
    private void excluirCompromisso(int id) {
        try {
            connection = fabrica.getConnection(db.getDir(), user.getDir(), password.getDir());

            PreparedStatement stmt = connection.prepareStatement("delete from compromisso as c where c.id = ?");
            stmt.setInt(1, id);

            stmt.executeUpdate();
            stmt.close();
            connection.close();
            criaTable();
            atualizaDadosTable();
            JOptionPane.showMessageDialog(null, "Compromisso excluído!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);

        } catch (ClassNotFoundException | SQLException | IOException ex) {
            Logger.getLogger(AgendaView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Não foi possível excluir!\n" + ex, "Erro", JOptionPane.ERROR_MESSAGE);

        }
    }
    
        /**
     * Método para carregar os niveis de acesso, preenchendo um objeto com nome
     * niveis
     *
     * @author Wesley Ozebe
     */
    public static void carregaNiveisAcesso() throws ClassNotFoundException, SQLException, IOException {
        connection = fabrica.getConnection(db.getDir(), user.getDir(), password.getDir());
        PreparedStatement stmt = connection.prepareStatement("select * from nivelAcesso order by nivelAcesso.id");
        ResultSet resultSet = stmt.executeQuery();
        niveis.removeAll(niveis);
        while (resultSet.next()) {
            NivelAcesso nv = new NivelAcesso();
            nv.setId(resultSet.getInt("id"));
            nv.setDescricao(resultSet.getString("descricao"));
            nv.setSigla(resultSet.getString("sigla"));
            niveis.add(nv);
        }
        resultSet.close();
        stmt.close();
        connection.close();
    }

}
